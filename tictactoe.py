# -*- coding: utf-8 -*-
"""TicTacToe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/199040uNJC6bqGN7HVPmu_JdjZYWRL4X6
"""

def ConstBoard(board): #current state, 0=_; -1=X; 1=O
  print("Current State of the Board: \n\n");
  for i in range(0, 9):
    if((i>0) and (i%3==0)): #print as 3*3 matrix
      print("\n");
    if(board[i] == 0):
      print("_",end="  "); #end with spacing
    if(board[i] == -1):
      print("X",end="  ");
    if(board[i] == 1):
      print("O",end="  ");
  print("\n\n");

def User1Turn(board):
  pos = input ("Enter X's position from [1,2,3,...,9]: ")
  pos = int(pos) - 1; #actually range is 0-8 so -1
  if (pos < 0 or pos >= len(board) or board[pos] != 0): #not empty
    print("Wrong Move!");
  board[pos] = -1;

def User2Turn(board):
  pos = input ("Enter O's position from [1,2,3,...,9]: ")
  pos = int(pos) - 1; #actually range is 0-8 so -1
  if (pos < 0 or pos >= len(board) or board[pos] != 0): #not empty
    print("Wrong Move!");
  board[pos] = 1;

def minmax(board, player): #player shows who's chance it is
  x = analyzeBoard(board); #check if anybody won
  if(x!=0): #someone won; as it is players chance, it's the previous person who won
    return (x*player);
  pos = -1; #assuming as we don't know
  value = -2; #2 player game so -1 1 or 0 values are returned by min-max
  for i in range(0, 9):
    if(board[i]==0): #that space is empty
      board[i] = player;
      score = -minmax(board, player*-1); #min-max score; if human is current player, next is ai
      board[i] = 0;
      if(score>value): #a better pos is obtained
        value = score;
        pos = i;
  if(pos == -1): #unable to know position or smthin
    return 0; #draw
  return value; #going backtracking using recursion

def CompTurn(board): #figuring the best move from the empty spaces available
  pos = -1; #assuming as we don't know
  value = -2; #2 player game so -1 1 or 0 values are returned by min-max
  for i in range(0, 9):
    if(board[i]==0): #that space is empty
      board[i] = 1; #Computer = O = 1
      score = -minmax(board, -1); #min-max score if X make a move
      board[i] = 0;
      if(score>value): #a better pos is obtained
        value = score;
        pos = i;
  board[pos] = 1; #As computer uses O symbol

def analyzeBoard(board): #all possible ways to win(row, col, diagnoal)
  cb = [[0, 1, 2], [3 ,4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
  for i in range (0,8): #8 elements in list cb
    if(board[cb[i][0]] != 0 and
       board[cb[i][0]] == board[cb[i][1]] and
       board[cb[i][0]] == board[cb[i][2]]): #board isnt blank = 0,
      return board[cb[i][0]]; #someone has won
  return 0; #no one won

def main():
  choice = input("Enter 1 for Single player, 2 for Multiplayer: ");
  choice = int(choice); #converting to int
  #data structure for storing your data = list (board is a list)
  board = [0, 0, 0, 0, 0, 0, 0, 0, 0] #9 zeroes for 3*3 board = empty

  if(choice == 1): #against AI
    print("Computer: O VS You: X");
    player = input("Enter to play 1(st) or 2(nd): ");
    player = int(player); #player=1 then human players first, else human plays 2nd

    for i in range(0, 9):#check-> won/draw; p1 won; p2 won
      if(analyzeBoard(board) != 0):#if won
        break;
      if((i+player)%2 == 0): #AI has 1st chance
        CompTurn(board);
      else: #human has the chance
        ConstBoard(board); #displays the current state of board
        User1Turn(board); #user's input to board

  else: #multiplayer
    player = 1;
    for i in range(0, 9):#check-> won/draw; u1 won; u2 won
      if(analyzeBoard(board) != 0):#if won
        break;
      if((i+player)%2 == 0): #User1 has 1st chance
        ConstBoard(board); #current state of board
        User1Turn(board); #user1's input to board
      else: #User2 has the chance
        ConstBoard(board); #displays the current state of board
        User2Turn(board); #user2's input to board

  x = analyzeBoard(board);
  if(x == 0): #draw
    ConstBoard(board); #current state of board
    print("Draw");
  if(x == -1): #X wins
    ConstBoard(board);
    print("Player X Wins! O Looses!");
  if(x == 1): #O wins
    ConstBoard(board);
    print("Player O Wins! X Looses!");

main()